import streamlit as st
from config import constants as cons
from view.order_form_view import OrderFormView

class EMAView:
    @staticmethod
    def show(controller):
        st.header("üìä Ph√¢n t√≠ch EMA Indicator")
        
        # 1. Khai b√°o bi·∫øn tr·∫°ng th√°i cho k·∫øt qu·∫£ ph√¢n t√≠ch
        if "ema_result" not in st.session_state:
            st.session_state["ema_result"] = None
        
        # --- Form Ph√¢n t√≠ch EMA ---
        with st.form("ema_form"):
            coin_pair = st.text_input("Nh·∫≠p c·∫∑p coin c·∫ßn ph√¢n t√≠ch", value=st.session_state.get("last_coin_pair", "BTCUSDT"))
            interval = st.selectbox(
                "Ch·ªçn khung th·ªùi gian", 
                ["1m", "5m", "15m", "30m", "1h", "4h", "1d"], 
                index=["1m", "5m", "15m", "30m", "1h", "4h", "1d"].index(st.session_state.get("last_interval", "15m"))
            )
            submitted = st.form_submit_button("üîç Ph√¢n t√≠ch EMA")

            if submitted:
                if not coin_pair.strip():
                    st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c·∫∑p coin tr∆∞·ªõc khi ph√¢n t√≠ch.")
                    st.session_state["ema_result"] = None # X√≥a k·∫øt qu·∫£ c≈© n·∫øu c√≥ l·ªói
                else:
                    try:
                        # L∆∞u coin_pair v√† interval v√†o session_state ƒë·ªÉ d√πng cho l·∫ßn sau
                        st.session_state["last_coin_pair"] = coin_pair
                        st.session_state["last_interval"] = interval

                        result = controller.handle_strategy(cons.EMA, coin_pair, interval)
                        st.session_state["ema_result"] = result # L∆∞u k·∫øt qu·∫£ v√†o session_state
                        
                        # ‚ö†Ô∏è Quan tr·ªçng: X√≥a tr·∫°ng th√°i form ƒë·∫∑t l·ªánh ƒë·ªÉ chu·∫©n b·ªã cho t√≠n hi·ªáu m·ªõi
                        if "show_order_form" in st.session_state:
                            del st.session_state["show_order_form"]
                            
                        # Bu·ªôc rerun ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ v√† c√°c n√∫t ƒë·∫∑t l·ªánh
                        st.rerun() 
                        
                    except Exception as e:
                        st.error(f"H√†m ph√¢n t√≠ch EMA c√≥ l·ªói: {e}")
                        st.session_state["ema_result"] = None

        # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† c√°c n√∫t ƒê·∫∑t l·ªánh (N·∫±m ngo√†i kh·ªëi form) ---
        result = st.session_state["ema_result"]
        
        if result:
            st.divider()
            st.success(result)
            
            # --- Ki·ªÉm tra t√≠n hi·ªáu ---
            if "mua" in result.lower() or "tƒÉng" in result.lower():
                # D√πng key duy nh·∫•t cho button ƒë·ªÉ Streamlit c√≥ th·ªÉ ph√¢n bi·ªát
                if st.button("üü¢ ƒê·∫∑t l·ªánh Mua (Long)", key="btn_long"):
                    # Thi·∫øt l·∫≠p tr·∫°ng th√°i v√† bu·ªôc rerun
                    st.session_state["show_order_form"] = ("long", st.session_state["last_coin_pair"])
                    st.rerun() # Rerun ƒë·ªÉ hi·ªÉn th·ªã form ƒë·∫∑t l·ªánh

            elif "b√°n" in result.lower() or "gi·∫£m" in result.lower():
                # D√πng key duy nh·∫•t cho button ƒë·ªÉ Streamlit c√≥ th·ªÉ ph√¢n bi·ªát
                if st.button("üî¥ ƒê·∫∑t l·ªánh B√°n (Short)", key="btn_short"):
                    # Thi·∫øt l·∫≠p tr·∫°ng th√°i v√† bu·ªôc rerun
                    st.session_state["show_order_form"] = ("short", st.session_state["last_coin_pair"])
                    st.rerun() # Rerun ƒë·ªÉ hi·ªÉn th·ªã form ƒë·∫∑t l·ªánh
            else:
                st.info("‚ö™ Kh√¥ng c√≥ t√≠n hi·ªáu r√µ r√†ng ƒë·ªÉ ƒë·∫∑t l·ªánh.")
        elif result is not None:
             st.info("Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ h√†m ph√¢n t√≠ch EMA.")

        # --- ‚úÖ Hi·ªÉn th·ªã form ƒë·∫∑t l·ªánh (Kh√¥ng ƒë·ªïi) ---
        if "show_order_form" in st.session_state:
            order_type, coin_pair_to_order = st.session_state["show_order_form"]
            OrderFormView.show(order_type, coin_pair_to_order)