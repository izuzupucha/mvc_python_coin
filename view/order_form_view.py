import streamlit as st

class OrderFormView:
    # H√†m gi·∫£ ƒë·ªãnh t√≠nh to√°n SL/TP (B·∫†N C·∫¶N THAY TH·∫æ B·∫∞NG LOGIC C·ª¶A M√åNH)
    @staticmethod
    def calculate_sl_tp(order_type: str, current_price: float):
        """
        T√≠nh to√°n SL v√† TP d·ª±a tr√™n gi√° hi·ªán t·∫°i.
        NOTE: Thay th·∫ø b·∫±ng logic t√≠nh to√°n th·ª±c t·∫ø (v√≠ d·ª•: d√πng ATR, R:R c·ªë ƒë·ªãnh, v.v.).
        """
        if order_type == 'long':
            # Long: SL th·∫•p h∆°n, TP cao h∆°n
            stop_loss = current_price * 0.99  # Gi·∫£ ƒë·ªãnh: SL 1% d∆∞·ªõi gi√° Entry
            take_profit = current_price * 1.02  # Gi·∫£ ƒë·ªãnh: TP 2% tr√™n gi√° Entry
        else: # short
            # Short: SL cao h∆°n, TP th·∫•p h∆°n
            stop_loss = current_price * 1.01  # Gi·∫£ ƒë·ªãnh: SL 1% tr√™n gi√° Entry
            take_profit = current_price * 0.98  # Gi·∫£ ƒë·ªãnh: TP 2% d∆∞·ªõi gi√° Entry
            
        # L√†m tr√≤n gi√° tr·ªã ƒë·ªÉ d·ªÖ nh√¨n
        return round(stop_loss, 2), round(take_profit, 2)

    @staticmethod
    def show(order_type: str, coin_pair: str):
        st.subheader(f"üí∞ ƒê·∫∑t l·ªánh {'MUA (Long)' if order_type == 'long' else 'B√ÅN (Short)'} cho {coin_pair}")
        
        # Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh cho session_state (ƒë·ªÉ tr√°nh l·ªói)
        if "calculated_entry" not in st.session_state:
             st.session_state["calculated_entry"] = 100.0
        if "calculated_sl" not in st.session_state:
             st.session_state["calculated_sl"] = 95.0
        if "calculated_tp" not in st.session_state:
             st.session_state["calculated_tp"] = 110.0
        if "auto_calculate_prices" not in st.session_state:
             st.session_state["auto_calculate_prices"] = False

        with st.form("order_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                # Thao t√°c nh·∫≠p V·ªën v√† R·ªßi ro
                capital = st.number_input("üíµ T·ªïng v·ªën (USD)", min_value=10.0, value=1000.0, step=10.0, key="order_capital")
                risk_percent = st.number_input("‚ö†Ô∏è T·ª∑ l·ªá r·ªßi ro (%)", min_value=0.1, max_value=100.0, value=2.0, step=0.5, key="order_risk_percent")
            
            with col2:
                # 1Ô∏è‚É£ INPUT/CALCULATE ENTRY PRICE
                # Gi·∫£ ƒë·ªãnh nh·∫≠p gi√° hi·ªán t·∫°i (Entry)
                # D√πng m·ªôt key kh√°c ƒë·ªÉ gi√° Entry c√≥ th·ªÉ ƒë∆∞·ª£c c·∫≠p nh·∫≠t m√† kh√¥ng b·ªã reset khi checkbox ƒë∆∞·ª£c b·∫•m
                current_entry = st.number_input(
                    "üéØ Gi√° v√†o l·ªánh (Entry)", 
                    min_value=0.0, 
                    value=st.session_state["calculated_entry"], 
                    step=0.1, 
                    key="entry_price_input"
                )
                
                # 2Ô∏è‚É£ CHECKBOX T·ª∞ ƒê·ªòNG T√çNH TO√ÅN
                # B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô t·ª± ƒë·ªông t√≠nh to√°n SL/TP
                auto_calculate = st.checkbox(
                    "‚ú® T·ª± ƒë·ªông t√≠nh SL/TP",
                    value=st.session_state["auto_calculate_prices"],
                    key="auto_calculate_prices_checkbox"
                )
            
            # C·∫≠p nh·∫≠t gi√° tr·ªã SL/TP n·∫øu checkbox ƒë∆∞·ª£c ch·ªçn
            if auto_calculate:
                # L∆∞u gi√° Entry hi·ªán t·∫°i ƒë·ªÉ d√πng cho l·∫ßn sau
                st.session_state["calculated_entry"] = current_entry
                
                # T√≠nh to√°n SL/TP d·ª±a tr√™n Entry
                calculated_sl, calculated_tp = OrderFormView.calculate_sl_tp(order_type, current_entry)
                
                st.session_state["calculated_sl"] = calculated_sl
                st.session_state["calculated_tp"] = calculated_tp
                
                # Hi·ªÉn th·ªã SL v√† TP ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n (ch·ªâ ƒë·ªÉ xem, kh√¥ng cho ch·ªânh s·ª≠a)
                stop_loss = st.number_input(
                    "üõë Gi√° c·∫Øt l·ªó (SL) (T·ª± ƒë·ªông)", 
                    min_value=0.0, 
                    value=calculated_sl, 
                    step=0.1, 
                    disabled=True,
                    key="sl_display"
                )
                take_profit = st.number_input(
                    "üèÅ Gi√° ch·ªët l·ªùi (TP) (T·ª± ƒë·ªông)", 
                    min_value=0.0, 
                    value=calculated_tp, 
                    step=0.1, 
                    disabled=True,
                    key="tp_display"
                )
                st.info(f"SL/TP ƒë∆∞·ª£c t√≠nh t·ª± ƒë·ªông d·ª±a tr√™n Entry `{current_entry}`")
                
            else:
                # 3Ô∏è‚É£ NH·∫¨P TH·ª¶ C√îNG SL/TP
                # N·∫øu kh√¥ng ch·ªçn t·ª± ƒë·ªông, cho ph√©p nh·∫≠p th·ªß c√¥ng
                stop_loss = st.number_input(
                    "üõë Gi√° c·∫Øt l·ªó (SL)", 
                    min_value=0.0, 
                    value=st.session_state.get("calculated_sl", 95.0), 
                    step=0.1,
                    key="sl_manual"
                )
                take_profit = st.number_input(
                    "üèÅ Gi√° ch·ªët l·ªùi (TP)", 
                    min_value=0.0, 
                    value=st.session_state.get("calculated_tp", 110.0), 
                    step=0.1,
                    key="tp_manual"
                )

            submitted = st.form_submit_button("‚úÖ X√°c nh·∫≠n ƒë·∫∑t l·ªánh")

        # L∆∞u tr·∫°ng th√°i checkbox
        st.session_state["auto_calculate_prices"] = auto_calculate

        # L·∫•y gi√° Entry cu·ªëi c√πng ƒë·ªÉ t√≠nh to√°n
        entry_price = current_entry

        # ‚úÖ T√≠nh to√°n khi b·∫•m submit
        if submitted:
            try:
                # 1Ô∏è‚É£ S·ªë ti·ªÅn r·ªßi ro
                risk_amount = capital * (risk_percent / 100.0)

                # 2Ô∏è‚É£ Kho·∫£ng c√°ch t·ª´ entry ƒë·∫øn SL
                diff = abs(entry_price - stop_loss)

                if diff == 0:
                    st.error("‚ùå Gi√° v√†o l·ªánh v√† SL kh√¥ng ƒë∆∞·ª£c tr√πng nhau.")
                    return
                
                if order_type == 'long' and entry_price <= stop_loss:
                    st.error("‚ùå L·ªánh MUA (Long): Gi√° SL ph·∫£i th·∫•p h∆°n gi√° Entry.")
                    return
                
                if order_type == 'short' and entry_price >= stop_loss:
                    st.error("‚ùå L·ªánh B√ÅN (Short): Gi√° SL ph·∫£i cao h∆°n gi√° Entry.")
                    return

                # 3Ô∏è‚É£ Kh·ªëi l∆∞·ª£ng l·ªánh (volume)
                volume = risk_amount / diff

                # 4Ô∏è‚É£ T·ª∑ l·ªá Risk/Reward
                rr_ratio = abs(take_profit - entry_price) / diff if diff != 0 else 0

                # ‚úÖ Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.success(
                    f"**K·∫øt qu·∫£ t√≠nh to√°n**\n"
                    f"- V·ªën: `${capital:,.2f}`\n"
                    f"- R·ªßi ro: `{risk_percent:.2f}%` ‚Üí `${risk_amount:,.2f}`\n"
                    f"- Kh·ªëi l∆∞·ª£ng l·ªánh: **{volume:.4f} {coin_pair.replace('USDT', '')}**\n"
                    f"- T·ª∑ l·ªá R:R = `{rr_ratio:.2f}`\n"
                )

                st.info(f"L·ªánh {order_type.upper()} ‚Äî Entry `{entry_price}`, SL `{stop_loss}`, TP `{take_profit}`")

                if st.button("üîô Quay l·∫°i", key="back_button_after_submit"):
                    del st.session_state["show_order_form"]
                    st.rerun()

            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói khi t√≠nh to√°n l·ªánh: {e}")