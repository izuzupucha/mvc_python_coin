import streamlit as st
from config import constants as cons
class RSIView:
    @staticmethod
    def show(controller):
        st.header(" Ph√¢n t√≠ch RSI Indicator")
        with st.form("rsi_form"):
            coin_pair = st.text_input("Nh·∫≠p c·∫∑p coin c·∫ßn ph√¢n t√≠ch", value="BTCUSDT")
            interval = st.selectbox(
                "Ch·ªçn khung th·ªùi gian",
                ["1m", "5m", "15m", "30m", "1h", "4h", "1d"],
                index=2
            )
            period = st.number_input(
                "Nh·∫≠p chu k·ª≥ RSI (period)", min_value=5, max_value=100, value=14, step=1
            )

            submitted = st.form_submit_button("üîç Ph√¢n t√≠ch RSI")

        # X·ª≠ l√Ω sau khi b·∫•m submit
        if submitted:
            if not coin_pair.strip():
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c·∫∑p coin tr∆∞·ªõc khi ph√¢n t√≠ch.")
            else:
                try:
                    # G·ªçi controller theo chu·∫©n MVC: key "rsi" + params
                    result = controller.handle_strategy(cons.RSI, coin_pair, interval, period)
                    st.write("DEBUG result:", result)
                    # N·∫øu controller tr·∫£ v·ªÅ chu·ªói k·∫øt qu·∫£ th√¨ hi·ªÉn th·ªã
                    if result is None:
                    st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ h√†m ph√¢n t√≠ch RSI.")
                    elif isinstance(result, str):
                        st.success(result)
                    elif hasattr(result, "to_dict"):   # pandas DataFrame
                        st.dataframe(result)
                    elif hasattr(result, "to_json"):   # plotly Figure
                        st.plotly_chart(result, use_container_width=True)
                    else:
                        st.write(result)
                except Exception as e:
                    st.info(f"H√†m ph√¢n t√≠ch RSI c√≥ l·ªói {e}")
        st.divider()
       