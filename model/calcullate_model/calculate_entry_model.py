import pandas as pd
import numpy as np
import streamlit as st
from model.base_analyze_model import BaseAnalyzeModel

class CalculateEntryModel(BaseAnalyzeModel):
    def __init__(self, data_model):
        super().__init__(data_model)

    def calculate_entry(self,
                        symbol,
                        interval,
                        direction: str = None,
                        ema_period: int = 20,
                        rsi_period: int = 14,
                        atr_period: int = 14,
                        atr_mult_sl: float = 1.0,
                        rr_ratio: float = 1.5,
                        lookback: int = 200,
                        rsi_threshold_long=45.0,
                        rsi_threshold_short=55.0):
        """
        T√≠nh entry theo chi·∫øn l∆∞·ª£c RSI + EMA Pullback + ATR, c√≥ log chi ti·∫øt ra m√†n h√¨nh.
        """
        try:
            st.markdown("### üß© **TH√îNG TIN ƒê·∫¶U V√ÄO**")
            st.json({
                "C·∫∑p coin (symbol)": symbol,
                "Khung th·ªùi gian (interval)": interval,
                "H∆∞·ªõng v√†o l·ªánh": direction,
                "Chu k·ª≥ EMA": ema_period,
                "Chu k·ª≥ RSI": rsi_period,
                "Chu k·ª≥ ATR": atr_period,
                "H·ªá s·ªë ATR (SL)": atr_mult_sl,
                "T·ª∑ l·ªá RR (TP/SL)": rr_ratio,
                "S·ªë n·∫øn ph√¢n t√≠ch": lookback,
                "Ng∆∞·ª°ng RSI Long": rsi_threshold_long,
                "Ng∆∞·ª°ng RSI Short": rsi_threshold_short
            })

            df, info = self.data_model.get_klines_binance(symbol=symbol, interval=interval, limit=lookback)
            if df.empty:
                st.warning("‚ö†Ô∏è D·ªØ li·ªáu tr·ªëng, kh√¥ng th·ªÉ t√≠nh to√°n.")
                return None

            # --- T√≠nh EMA ---
            df["ema"] = df["close"].ewm(span=ema_period, adjust=False).mean()

            # --- T√≠nh RSI ---
            delta = df["close"].diff()
            gain = delta.where(delta > 0, 0)
            loss = -delta.where(delta < 0, 0)
            avg_gain = gain.rolling(rsi_period).mean()
            avg_loss = loss.rolling(rsi_period).mean()
            rs = avg_gain / avg_loss
            df["rsi"] = 100 - (100 / (1 + rs))

            # --- T√≠nh ATR ---
            high = df["high"]
            low = df["low"]
            close = df["close"]
            tr1 = high - low
            tr2 = (high - close.shift()).abs()
            tr3 = (low - close.shift()).abs()
            tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            df["atr"] = tr.rolling(atr_period).mean()

            last = df.iloc[-1]
            prev = df.iloc[-2]

            # --- X√°c ƒë·ªãnh h∆∞·ªõng giao d·ªãch ---
            inferred_direction = None
            if last["close"] > last["ema"]:
                inferred_direction = "long"
            elif last["close"] < last["ema"]:
                inferred_direction = "short"

            final_dir = direction.lower() if isinstance(direction, str) else inferred_direction

            st.markdown("### üìä **TH√îNG TIN K·ª∏ THU·∫¨T CU·ªêI C√ôNG**")
            st.json({
                "Gi√° ƒë√≥ng n·∫øn hi·ªán t·∫°i (last_close)": round(last["close"], 4),
                "Gi√° ƒë√≥ng n·∫øn tr∆∞·ªõc ƒë√≥ (prev_close)": round(prev["close"], 4),
                "EMA hi·ªán t·∫°i": round(last["ema"], 4),
                "RSI hi·ªán t·∫°i (rsi_last)": round(last["rsi"], 2),
                "RSI tr∆∞·ªõc ƒë√≥ (rsi_prev)": round(prev["rsi"], 2),
                "ATR hi·ªán t·∫°i": round(last["atr"], 4),
                "H∆∞·ªõng suy lu·∫≠n t·ª´ EMA (direction_inferred)": inferred_direction,
                "H∆∞·ªõng giao d·ªãch cu·ªëi c√πng (direction_final)": final_dir,
                "Ng∆∞·ª°ng RSI cho Long": rsi_threshold_long,
                "Ng∆∞·ª°ng RSI cho Short": rsi_threshold_short
            })
            # --- Ki·ªÉm tra h∆∞·ªõng ---
            if final_dir not in ("long", "short"):
                st.info("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c h∆∞·ªõng (long/short).")
                return None

            # --- Ki·ªÉm tra RSI Pullback ƒë·ªông theo ng∆∞·ª°ng ng∆∞·ªùi d√πng ---
            if final_dir == "long":
                rsi_ok = True
                #rsi_ok = (last["rsi"] < rsi_threshold_long) and (prev["rsi"] < last["rsi"])
                st.info(
                    f"RSI Pullback (LONG) ‚Äî "
                    f"RSI tr∆∞·ªõc ƒë√≥ (prev_rsi)={prev['rsi']:.2f}, RSI hi·ªán t·∫°i (last_rsi)={last['rsi']:.2f}, "
                    f"Ng∆∞·ª°ng RSI cho Long={rsi_threshold_long}, ok={rsi_ok}. "
                    f"Kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán: last_rsi({last['rsi']:.2f}) < ng∆∞·ª°ng RSI Long({rsi_threshold_long}) "
                    f"v√† prev_rsi ({prev['rsi']:.2f}) < last_rsi ({last['rsi']:.2f})."
                )
            else:
                rsi_ok = True
                #rsi_ok = (last["rsi"] > rsi_threshold_short) and (prev["rsi"] > last["rsi"])
                st.info(
                    f"RSI Pullback (SHORT) ‚Äî "
                    f"RSI tr∆∞·ªõc ƒë√≥ (prev_rsi)={prev['rsi']:.2f}, RSI hi·ªán t·∫°i (last_rsi)={last['rsi']:.2f}, "
                    f"Ng∆∞·ª°ng RSI cho Short={rsi_threshold_short}, ok={rsi_ok}. "
                    f"Kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán: last_rsi({last['rsi']:.2f}) > ng∆∞·ª°ng RSI short({rsi_threshold_short}) "
                    f"v√† prev_rsi({prev['rsi']:.2f}) > last_rsi ({last['rsi']:.2f})."
                )
            if not rsi_ok:
                st.warning(f"‚ùå Kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán RSI pullback cho h∆∞·ªõng {final_dir.upper()}")
                return None

            entry = float(last["close"])
            atr = float(last["atr"])

            if np.isnan(atr) or atr <= 0:
                st.warning("‚ö†Ô∏è ATR kh√¥ng h·ª£p l·ªá, kh√¥ng th·ªÉ t√≠nh SL/TP.")
                return None

            if final_dir == "long":
                stoploss = entry - atr * atr_mult_sl
                takeprofit = entry + (atr * atr_mult_sl * rr_ratio)
            else:
                stoploss = entry + atr * atr_mult_sl
                takeprofit = entry - (atr * atr_mult_sl * rr_ratio)

            result = {
                "symbol": symbol,
                "interval": interval,
                "direction": final_dir,
                "entry": round(entry, 8),
                "stoploss": round(stoploss, 8),
                "takeprofit": round(takeprofit, 8),
                "atr_value": round(atr, 8),
                "ema": round(last["ema"], 8),
                "rsi": round(last["rsi"], 4),
                "timestamp": pd.Timestamp.now()
            }

            st.markdown("### ‚úÖ **K·∫æT QU·∫¢ CU·ªêI C√ôNG**")
            st.json(result)

            return result

        except Exception as e:
            st.error(f"üí• L·ªói trong calculate_entry: {e}")
            return None
